{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"risc-python Python client and CLI for RISC Requirements Python 3.6+ Installation & Usage pyenv install 3.7 pip(env) install risc","title":"Home"},{"location":"#risc-python","text":"Python client and CLI for RISC","title":"risc-python"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation-usage","text":"pyenv install 3.7 pip(env) install risc","title":"Installation &amp; Usage"},{"location":"changes/","text":"Change Log v0.1.1 (2019-11-20) Full Changelog Implemented enhancements: Adjust get_server handling for weird nesting and increment version #8 ( mbeacom ) Fixed bugs: Adjust get\\_server handling for weird nesting and increment version #8 ( mbeacom ) v0.1.0 (2019-11-11) Full Changelog Implemented enhancements: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) Fixed bugs: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) v0.0.4 (2019-10-31) Full Changelog v0.0.3 (2019-10-31) Full Changelog v0.0.2 (2019-10-07) Full Changelog Implemented enhancements: Connectivity adjustments #5 ( mbeacom ) Fixed bugs: Adjust the auth token fetch to preceed assessment code #2 ( mbeacom ) Merged pull requests: Update dependencies #4 ( mbeacom ) Add base docs and adjust dependencies #1 ( mbeacom ) v0.0.1 (2019-09-10) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"changes/#change-log","text":"","title":"Change Log"},{"location":"changes/#v011-2019-11-20","text":"Full Changelog Implemented enhancements: Adjust get_server handling for weird nesting and increment version #8 ( mbeacom ) Fixed bugs: Adjust get\\_server handling for weird nesting and increment version #8 ( mbeacom )","title":"v0.1.1 (2019-11-20)"},{"location":"changes/#v010-2019-11-11","text":"Full Changelog Implemented enhancements: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) Fixed bugs: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom )","title":"v0.1.0 (2019-11-11)"},{"location":"changes/#v004-2019-10-31","text":"Full Changelog","title":"v0.0.4 (2019-10-31)"},{"location":"changes/#v003-2019-10-31","text":"Full Changelog","title":"v0.0.3 (2019-10-31)"},{"location":"changes/#v002-2019-10-07","text":"Full Changelog Implemented enhancements: Connectivity adjustments #5 ( mbeacom ) Fixed bugs: Adjust the auth token fetch to preceed assessment code #2 ( mbeacom ) Merged pull requests: Update dependencies #4 ( mbeacom ) Add base docs and adjust dependencies #1 ( mbeacom )","title":"v0.0.2 (2019-10-07)"},{"location":"changes/#v001-2019-09-10","text":"* This Change Log was automatically generated by github_changelog_generator","title":"v0.0.1 (2019-09-10)"},{"location":"references/","text":"Reference Materials Documentation RISC General Documentation RESTful API Access Swagger API Documentation API References Errors Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body. Package Related General Guidance Python 3 - Type hints MyPy - Python 3 Cheat Sheet Packages & Dependencies Package Dependencies Requests - Python HTTP module Python Fire - CLI module Build/Dev/Testing Dependencies black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"References"},{"location":"references/#reference-materials","text":"","title":"Reference Materials"},{"location":"references/#documentation","text":"","title":"Documentation"},{"location":"references/#risc","text":"General Documentation RESTful API Access Swagger API Documentation","title":"RISC"},{"location":"references/#api-references","text":"","title":"API References"},{"location":"references/#errors","text":"Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body.","title":"Errors"},{"location":"references/#package-related","text":"","title":"Package Related"},{"location":"references/#general-guidance","text":"Python 3 - Type hints MyPy - Python 3 Cheat Sheet","title":"General Guidance"},{"location":"references/#packages-dependencies","text":"","title":"Packages &amp; Dependencies"},{"location":"references/#package-dependencies","text":"Requests - Python HTTP module Python Fire - CLI module","title":"Package Dependencies"},{"location":"references/#builddevtesting-dependencies","text":"black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"Build/Dev/Testing Dependencies"},{"location":"securitypolicy/","text":"Security Policy This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases. Supported Versions Version Supported 0.0.x :x: 0.x.x :x: Reporting a Vulnerability Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Security Policy"},{"location":"securitypolicy/#security-policy","text":"This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases.","title":"Security Policy"},{"location":"securitypolicy/#supported-versions","text":"Version Supported 0.0.x :x: 0.x.x :x:","title":"Supported Versions"},{"location":"securitypolicy/#reporting-a-vulnerability","text":"Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Reporting a Vulnerability"},{"location":"code/risc/main/","text":"risc.main Define the RISC primary module. RISC RISC(self, api_token: str = '', user_id: str = '', password: str = '') -> None Define the RISC toplevel class. build_auth RISC.build_auth(self) -> Dict[str, str] Build the API authentication token. get_assessments RISC.get_assessments(self) -> risc.models.RiscAssessments Get the RISC assessment code. Returns: str: The RISC assessment code. get_assessment RISC.get_assessment(self, **kwargs) -> risc.models.RiscAssessment Get the RISC assessment code. Returns: str: The RISC assessment code. get_auth_token RISC.get_auth_token(self) Authenticate with RISC. Returns: str: The final authentication token to be used with subsequent requests. assets_get_summary RISC.assets_get_summary(self) Use to retrieve a list of device types and counts. assets_get_assets RISC.assets_get_assets(self, device_type: str = '', stack_id: int = 0, device_id: str = '', tag_id: str = '', page: int = 0) -> requests.models.Response Use to retrieve a list of device types and counts. stacks_get_summary RISC.stacks_get_summary(self) Use to retrieve a list of stacks. stacks_get_summary_cost RISC.stacks_get_summary_cost(self, provider_id: str) Use to retrieve a list of stack costs. stacks_get_connectivity RISC.stacks_get_connectivity(self, stack_id: str = '') -> risc.models.RiscStackConnectivityParent Use to retrieve a list of connected stacks. stacks_get_device_connectivity RISC.stacks_get_device_connectivity(self, stack_id: int, connectivity_type: str = 'internal', page: int = 0) -> risc.models.RiscDeviceConnectivityParent Use to retrieve a list of connected stacks. iaas_get_providers RISC.iaas_get_providers(self) Use to retrieve a list of IaaS providers. iaas_pricing RISC.iaas_pricing(self, payload: Dict[str, str]) Use to retrieve a list of IaaS pricing. tags_get_tags RISC.tags_get_tags(self, payload: Dict[str, str]) Use to retrieve a list of IaaS providers. tags_add_tags RISC.tags_add_tags(self, payload: Dict[str, str]) Use to retrieve a list of IaaS providers. assets_search RISC.assets_search(self, search: str = '') Get RISC assessment data. ucel_get_checks RISC.ucel_get_checks(self, device_id: str = '') Use to retrieve a list of checks that have been run against devices. ucel_get_assets RISC.ucel_get_assets(self, check_id: str = '') Use to retrieve data on the device(s) by check. ucel_get_assets_paginated RISC.ucel_get_assets_paginated(self, check_id: str = '', page: int = 1) Use to retrieve data on the device(s) by check. stacks_get_listeners RISC.stacks_get_listeners(self, stack_id: int) Use to retrieve a list of listeners in a stack. get_swagger RISC.get_swagger(self) Fetch the swagger API configuration file. get_server RISC.get_server(self, search: str = '', compare: str = 'hostname') -> Dict[str, Any] Sift through the asset search response and only return the relevant host. Args: search (str): The value to search for against the assets search API endpoint. compare (str): The key to be used to match the provided search value with. For example, this can be changed from hostname to identifying_ip. Defaults to: hostname. Returns: dict: The device asset object, as returned from the RISC API. get_application_ips RISC.get_application_ips(self, application: str, identifying_ips_only: bool = True) -> List[Any] Get all associated IP addresses for the provided application stack. Args: application (str): The application stack name, as identified in RISC. identifying_ips_only (bool): Whether or not to return only the identifying_ip value for each asset found within the application stack. If set to: False, this method will iterate through all ips in the device data object. Defaults to: True. Returns: list of str: The list of device IP addresses present in the application stack. get_disks RISC.get_disks(self, search: str, fudge_factor: float = 1.5, only_local_disks: bool = True) -> Dict[str, Any] Get disk data for a specific asset. Args: search (str): The asset hostname to lookup. fudge_factor (float): The value multiplier to be used when calculating volume size to be returned. This can be used to estimate a buffer over current device usage. Defaults to: 1.0 to represent the existing disk usage. only_local_disks (bool): Whether or not to reduce the response to include only local disks. Defaults to: True. Returns: dict: The mapping of disk data provided by RISC and additional drive usage data. main main() -> None Define the main entry method for the CLI.","title":"Main"},{"location":"code/risc/models/","text":"risc.models Define the RISC models module. AbstractRiscModel AbstractRiscModel(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01')) -> None Abstract resource model for all RISC models. to_dict Get the dictionary representation of the model's attributes. to_dict_items Get the dictionary items of the model's attributes. uuid Instances of the UUID class represent UUIDs as specified in RFC 4122. UUID objects are immutable, hashable, and usable as dictionary keys. Converting a UUID to a string with str() yields something in the form '12345678-1234-1234-1234-123456789abc'. The UUID constructor accepts five possible forms: a similar string of hexadecimal digits, or a tuple of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and 48-bit values respectively) as an argument named 'fields', or a string of 16 bytes (with all the integer fields in big-endian order) as an argument named 'bytes', or a string of 16 bytes (with the first three fields in little-endian order) as an argument named 'bytes_le', or a single 128-bit integer as an argument named 'int'. UUIDs have these read-only attributes: bytes the UUID as a 16-byte string (containing the six integer fields in big-endian byte order) bytes_le the UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order) fields a tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes: time_low the first 32 bits of the UUID time_mid the next 16 bits of the UUID time_hi_version the next 16 bits of the UUID clock_seq_hi_variant the next 8 bits of the UUID clock_seq_low the next 8 bits of the UUID node the last 48 bits of the UUID time the 60-bit timestamp clock_seq the 14-bit sequence number hex the UUID as a 32-character hexadecimal string int the UUID as a 128-bit integer urn the UUID as a URN as specified in RFC 4122 variant the UUID variant (one of the constants RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE) version the UUID version number (1 through 5, meaningful only when the variant is RFC_4122) is_safe An enum indicating whether the UUID has been generated in a way that is safe for multiprocessing applications, via uuid_generate_time_safe(3). to_list_factory AbstractRiscModel.to_list_factory(self, class_type: Any, factory_objects: List[Any]) -> List[Any] Handle the casting of lists to a list of the provided object type. to_obj_factory AbstractRiscModel.to_obj_factory(self, class_type: Any, factory_object: Any) -> Any Handle the casting of an object to the provided object type. RiscResponse RiscResponse(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, session: requests.sessions.Session = <requests.sessions.Session object at 0x7f29173580d0>, items: List[Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: Dict[str, str] = <factory>, page: int = 0) -> None Abstract resource model for all RISC models. page int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 response The :class: Response <Response> object, which contains a server's response to an HTTP request. return_status str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. return_status_detail str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. session A Requests session. Provides cookie persistence, connection-pooling, and configuration. Basic Usage:: import requests s = requests.Session() s.get('https://httpbin.org/get') Or as a context manager:: with requests.Session() as s: s.get('https://httpbin.org/get') RiscResourceModel RiscResourceModel(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>) -> None Abstract resource model for all RISC models. response The :class: Response <Response> object, which contains a server's response to an HTTP request. RiscAssessment RiscAssessment(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, address: str = '', appliance_public_ip: str = '', assessment_code: str = '', assessment_stage_description: str = '', assessment_stage_name: str = '', city: str = '', company_name: str = '', country: str = '', end_date: str = '', start_date: str = '', state: str = '', zip: str = '', json: Dict[str, str] = <factory>) -> None Define the Assessment resource model schema. address str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. appliance_public_ip str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. assessment_code str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. assessment_stage_description str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. assessment_stage_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. city str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. company_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. country str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. end_date str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. is_demo Determine whether or not the Assessment is a demo. start_date str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. state str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. zip str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. RiscAssessments RiscAssessments(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, session: requests.sessions.Session = <requests.sessions.Session object at 0x7f29173580d0>, items: List[Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: Dict[str, str] = <factory>, page: int = 0, assessments: List[Any] = <factory>) -> None Define the Assessments resource model schema. RiscStacks RiscStacks(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, session: requests.sessions.Session = <requests.sessions.Session object at 0x7f29173580d0>, items: List[Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: Dict[str, str] = <factory>, page: int = 0, stacks: List[Any] = <factory>) -> None Define the Stacks resource model schema. RiscStackConnectivity RiscStackConnectivity(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, avg_duration_per_connection: float = 0.0, avg_kbps_per_connection: float = 0.0, avg_rtt_per_connection: float = 0.0, connections_seen_via_netstat: int = 0, dest_location: int = 0, dest_location_name: str = '', max_kbps_per_connection: float = 0.0, max_rtt_per_connection: float = 0.0, min_rtt_per_connection: float = 0.0, number_of_distinct_protocols: int = 0, number_of_distinct_source_ip_dest_ip_pairs: int = 0, source_location_name: str = '', source_locationid: int = 0, total_bytes: int = 0, total_duration_per_connection: float = 0.0, total_flows: int = 0) -> None Define the Connectivity resource model schema. avg_duration_per_connection Convert a string or number to a floating point number, if possible. avg_kbps_per_connection Convert a string or number to a floating point number, if possible. avg_rtt_per_connection Convert a string or number to a floating point number, if possible. connections_seen_via_netstat int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_location int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_location_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. max_kbps_per_connection Convert a string or number to a floating point number, if possible. max_rtt_per_connection Convert a string or number to a floating point number, if possible. min_rtt_per_connection Convert a string or number to a floating point number, if possible. number_of_distinct_protocols int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 number_of_distinct_source_ip_dest_ip_pairs int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_location_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. source_locationid int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 total_bytes int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 total_duration_per_connection Convert a string or number to a floating point number, if possible. total_flows int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 RiscStackConnectivityParent RiscStackConnectivityParent(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, connectivity: List[Any] = <factory>, returnStatus: str = '', returnStatusDetail: str = '') -> None Define the parent Stack Connectivity resource model schema. dataframe Handle converting the connectivity list of objects to a pandas DataFrame. returnStatus str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. returnStatusDetail str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. RiscDeviceConnectivity RiscDeviceConnectivity(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, avg_duration: float = 0.0, avg_kbps: float = 0.0, avg_rtt: float = 0.0, dest_application: str = '', dest_application_context: str = '', dest_application_instance: str = '', dest_bytes: int = 0, dest_deviceid: int = 0, dest_ip: str = '', dest_packet_count: int = 0, dest_packet_loss: int = 0, dest_port: int = 0, dest_process: str = '', max_kbps: float = 0.0, max_rtt: float = 0.0, min_rtt: float = 0.0, netstat_count: int = 0, source_application: str = '', source_application_context: str = '', source_application_instance: str = '', source_bytes: int = 0, source_deviceid: int = 0, source_packet_count: int = 0, source_packet_loss: int = 0, source_process: str = '', src_ip: str = '', total_bytes: int = 0, total_duration: float = 0.0, total_packets: int = 0) -> None Define the Device Connectivity resource model schema. avg_duration Convert a string or number to a floating point number, if possible. avg_kbps Convert a string or number to a floating point number, if possible. avg_rtt Convert a string or number to a floating point number, if possible. dest_application str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. dest_application_context str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. dest_application_instance str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. dest_bytes int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_deviceid int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_ip str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. dest_packet_count int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_packet_loss int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_port int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 dest_process str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. max_kbps Convert a string or number to a floating point number, if possible. max_rtt Convert a string or number to a floating point number, if possible. min_rtt Convert a string or number to a floating point number, if possible. netstat_count int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_application str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. source_application_context str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. source_application_instance str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. source_bytes int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_deviceid int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_packet_count int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_packet_loss int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 source_process str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. src_ip str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. total_bytes int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 total_duration Convert a string or number to a floating point number, if possible. total_packets int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 RiscDeviceConnectivityParent RiscDeviceConnectivityParent(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, connectivity: List[Any] = <factory>, returnStatus: str = '', returnStatusDetail: str = '') -> None Define the parent Device Connectivity resource model schema. dataframe Handle converting the connectivity list of objects to a pandas DataFrame. returnStatus str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. returnStatusDetail str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. RiscTag RiscTag(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, tagid: int = 0, tagkey: str = '', tagvalue: str = '') -> None Define the Tag resource model schema. tagid int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 tagkey str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. tagvalue str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. RiscStack RiscStack(self, uuid: uuid.UUID = UUID('2d96cbd8-5be7-4e83-9ad7-03706a3f3e01'), response: requests.models.Response = <Response [None]>, confirmed: str = '', confirmedby: str = 'not set', licensed: int = 0, num_members_with_failed_checks: int = 0, num_stack_members: int = 0, stack_name: str = '', stackid: int = 0, tags: List[Any] = <factory>) -> None Define the Stack resource model schema. confirmed str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. confirmedby str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. licensed int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 num_members_with_failed_checks int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 num_stack_members int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4 stack_name str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. stackid int([x]) -> integer int(x, base=10) -> integer Convert a number or string to an integer, or return 0 if no arguments are given. If x is a number, return x. int (). For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base. The literal can be preceded by '+' or '-' and be surrounded by whitespace. The base defaults to 10. Valid bases are 0 and 2-36. Base 0 means to interpret the base from the string as an integer literal. int('0b100', base=0) 4","title":"Models"},{"location":"code/risc/utils/","text":"risc.utils Define the RISC utilities. get_user_agent get_user_agent(user_agent: str = 'risc-python') -> str Get the current module version. roundup roundup(x: float) -> int Round the provided float up to the nearest tens. determine_bytes determine_bytes(size: float) -> Dict[str, Any] Determine the highest denomination from bytes to KB, MB, GB, and TB. Args: size (int): The size, in bytes. Returns: dict: The dictionary mapping of highest bytes denomination and the equivalent size. format_bytes format_bytes(size: float, denomination: str = 'GB') -> float Convert bytes to the desired denomination. Args: size (int): The size, in bytes. denomination (str): The byte denomination to convert size to. Defaults to: GB. Options are: KB, MB, GB, and TB. Returns: float: The float formatted to the requested denomination. handle_disk_sizing handle_disk_sizing(total_size: str, free_size: str, fudge_factor: float = 1.5) -> Dict[str, Any] Determine disk sizing based on the provided fudge factor and utilized space.","title":"Utilities"}]}