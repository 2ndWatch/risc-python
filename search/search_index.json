{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"risc-python Python client and CLI for RISC Requirements Python 3.6+ Installation & Usage pyenv install 3.7 pip(env) install risc","title":"Home"},{"location":"#risc-python","text":"Python client and CLI for RISC","title":"risc-python"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation-usage","text":"pyenv install 3.7 pip(env) install risc","title":"Installation &amp; Usage"},{"location":"changes/","text":"Change Log v0.1.1 (2019-11-20) Full Changelog Implemented enhancements: Adjust get_server handling for weird nesting and increment version #8 ( mbeacom ) Fixed bugs: Adjust get\\_server handling for weird nesting and increment version #8 ( mbeacom ) v0.1.0 (2019-11-11) Full Changelog Implemented enhancements: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) Fixed bugs: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) v0.0.4 (2019-10-31) Full Changelog v0.0.3 (2019-10-31) Full Changelog v0.0.2 (2019-10-07) Full Changelog Implemented enhancements: Connectivity adjustments #5 ( mbeacom ) Fixed bugs: Adjust the auth token fetch to preceed assessment code #2 ( mbeacom ) Merged pull requests: Update dependencies #4 ( mbeacom ) Add base docs and adjust dependencies #1 ( mbeacom ) v0.0.1 (2019-09-10) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"changes/#change-log","text":"","title":"Change Log"},{"location":"changes/#v011-2019-11-20","text":"Full Changelog Implemented enhancements: Adjust get_server handling for weird nesting and increment version #8 ( mbeacom ) Fixed bugs: Adjust get\\_server handling for weird nesting and increment version #8 ( mbeacom )","title":"v0.1.1 (2019-11-20)"},{"location":"changes/#v010-2019-11-11","text":"Full Changelog Implemented enhancements: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom ) Fixed bugs: Fix IP address retrieval by app stack to handle grab bag of response types #6 Adjust ip handling for multiple return types #7 ( mbeacom )","title":"v0.1.0 (2019-11-11)"},{"location":"changes/#v004-2019-10-31","text":"Full Changelog","title":"v0.0.4 (2019-10-31)"},{"location":"changes/#v003-2019-10-31","text":"Full Changelog","title":"v0.0.3 (2019-10-31)"},{"location":"changes/#v002-2019-10-07","text":"Full Changelog Implemented enhancements: Connectivity adjustments #5 ( mbeacom ) Fixed bugs: Adjust the auth token fetch to preceed assessment code #2 ( mbeacom ) Merged pull requests: Update dependencies #4 ( mbeacom ) Add base docs and adjust dependencies #1 ( mbeacom )","title":"v0.0.2 (2019-10-07)"},{"location":"changes/#v001-2019-09-10","text":"* This Change Log was automatically generated by github_changelog_generator","title":"v0.0.1 (2019-09-10)"},{"location":"references/","text":"Reference Materials Documentation RISC General Documentation RESTful API Access Swagger API Documentation API References Errors Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body. Package Related General Guidance Python 3 - Type hints MyPy - Python 3 Cheat Sheet Packages & Dependencies Package Dependencies Requests - Python HTTP module Python Fire - CLI module Build/Dev/Testing Dependencies black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"References"},{"location":"references/#reference-materials","text":"","title":"Reference Materials"},{"location":"references/#documentation","text":"","title":"Documentation"},{"location":"references/#risc","text":"General Documentation RESTful API Access Swagger API Documentation","title":"RISC"},{"location":"references/#api-references","text":"","title":"API References"},{"location":"references/#errors","text":"Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body.","title":"Errors"},{"location":"references/#package-related","text":"","title":"Package Related"},{"location":"references/#general-guidance","text":"Python 3 - Type hints MyPy - Python 3 Cheat Sheet","title":"General Guidance"},{"location":"references/#packages-dependencies","text":"","title":"Packages &amp; Dependencies"},{"location":"references/#package-dependencies","text":"Requests - Python HTTP module Python Fire - CLI module","title":"Package Dependencies"},{"location":"references/#builddevtesting-dependencies","text":"black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"Build/Dev/Testing Dependencies"},{"location":"securitypolicy/","text":"Security Policy This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases. Supported Versions Version Supported 0.0.x :x: 0.x.x :x: Reporting a Vulnerability Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Security Policy"},{"location":"securitypolicy/#security-policy","text":"This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases.","title":"Security Policy"},{"location":"securitypolicy/#supported-versions","text":"Version Supported 0.0.x :x: 0.x.x :x:","title":"Supported Versions"},{"location":"securitypolicy/#reporting-a-vulnerability","text":"Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Reporting a Vulnerability"},{"location":"code/risc/main/","text":"risc.main Define the RISC primary module. RISC RISC(self, api_token: str = '', user_id: str = '', password: str = '') Define the RISC toplevel class. build_auth RISC.build_auth() Build the API authentication token. get_assessments RISC.get_assessments() Get the RISC assessment code. Returns: str: The RISC assessment code. get_assessment RISC.get_assessment(**kwargs) Get the RISC assessment code. Returns: str: The RISC assessment code. get_auth_token RISC.get_auth_token() Authenticate with RISC. Returns: str: The final authentication token to be used with subsequent requests. assets_get_summary RISC.assets_get_summary() Use to retrieve a list of device types and counts. assets_get_assets RISC.assets_get_assets(device_type: str = '', stack_id: int = 0, device_id: str = '', tag_id: str = '', page: int = 0) Use to retrieve a list of device types and counts. stacks_get_summary RISC.stacks_get_summary() Use to retrieve a list of stacks. stacks_get_summary_cost RISC.stacks_get_summary_cost(provider_id: str) Use to retrieve a list of stack costs. stacks_get_connectivity RISC.stacks_get_connectivity(stack_id: str = '') Use to retrieve a list of connected stacks. stacks_get_device_connectivity RISC.stacks_get_device_connectivity(stack_id: int, connectivity_type: str = 'internal', page: int = 0) Use to retrieve a list of connected stacks. iaas_get_providers RISC.iaas_get_providers() Use to retrieve a list of IaaS providers. iaas_pricing RISC.iaas_pricing(payload: typing.Dict[str, str]) Use to retrieve a list of IaaS pricing. tags_get_tags RISC.tags_get_tags(payload: typing.Dict[str, str]) Use to retrieve a list of IaaS providers. tags_add_tags RISC.tags_add_tags(payload: typing.Dict[str, str]) Use to retrieve a list of IaaS providers. assets_search RISC.assets_search(search: str = '') Get RISC assessment data. ucel_get_checks RISC.ucel_get_checks(device_id: str = '') Use to retrieve a list of checks that have been run against devices. ucel_get_assets RISC.ucel_get_assets(check_id: str = '') Use to retrieve data on the device(s) by check. ucel_get_assets_paginated RISC.ucel_get_assets_paginated(check_id: str = '', page: int = 1) Use to retrieve data on the device(s) by check. stacks_get_listeners RISC.stacks_get_listeners(stack_id: int) Use to retrieve a list of listeners in a stack. get_swagger RISC.get_swagger() Fetch the swagger API configuration file. get_server RISC.get_server(search: str = '', compare: str = 'hostname') Sift through the asset search response and only return the relevant host. Args: search (str): The value to search for against the assets search API endpoint. compare (str): The key to be used to match the provided search value with. For example, this can be changed from hostname to identifying_ip. Defaults to: hostname. Returns: dict: The device asset object, as returned from the RISC API. get_application_ips RISC.get_application_ips(application: str, identifying_ips_only: bool = True) Get all associated IP addresses for the provided application stack. Args: application (str): The application stack name, as identified in RISC. identifying_ips_only (bool): Whether or not to return only the identifying_ip value for each asset found within the application stack. If set to: False, this method will iterate through all ips in the device data object. Defaults to: True. Returns: list of str: The list of device IP addresses present in the application stack. get_disks RISC.get_disks(search: str, fudge_factor: float = 1.5, only_local_disks: bool = True) Get disk data for a specific asset. Args: search (str): The asset hostname to lookup. fudge_factor (float): The value multiplier to be used when calculating volume size to be returned. This can be used to estimate a buffer over current device usage. Defaults to: 1.0 to represent the existing disk usage. only_local_disks (bool): Whether or not to reduce the response to include only local disks. Defaults to: True. Returns: dict: The mapping of disk data provided by RISC and additional drive usage data. main main() Define the main entry method for the CLI.","title":"Main"},{"location":"code/risc/models/","text":"risc.models Define the RISC models module. AbstractRiscModel AbstractRiscModel( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17')) Abstract resource model for all RISC models. to_dict Get the dictionary representation of the model's attributes. to_dict_items Get the dictionary items of the model's attributes. uuid to_list_factory AbstractRiscModel.to_list_factory( class_type: typing.Any, factory_objects: typing.List[typing.Any]) Handle the casting of lists to a list of the provided object type. to_obj_factory AbstractRiscModel.to_obj_factory(class_type: typing.Any, factory_object: typing.Any) Handle the casting of an object to the provided object type. RiscResponse RiscResponse( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, session: Session = <requests.sessions.Session object at 0x7fa8f059ad00>, items: typing.List[typing.Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: typing.Dict[str, str] = <factory>, page: int = 0) Abstract resource model for all RISC models. page response return_status return_status_detail session RiscResourceModel RiscResourceModel( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>) Abstract resource model for all RISC models. response RiscAssessment RiscAssessment(self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, address: str = '', appliance_public_ip: str = '', assessment_code: str = '', assessment_stage_description: str = '', assessment_stage_name: str = '', city: str = '', company_name: str = '', country: str = '', end_date: str = '', start_date: str = '', state: str = '', zip: str = '', json: typing.Dict[str, str] = <factory>) Define the Assessment resource model schema. address appliance_public_ip assessment_code assessment_stage_description assessment_stage_name city company_name country end_date is_demo Determine whether or not the Assessment is a demo. start_date state zip RiscAssessments RiscAssessments( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, session: Session = <requests.sessions.Session object at 0x7fa8f059ad00>, items: typing.List[typing.Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: typing.Dict[str, str] = <factory>, page: int = 0, assessments: typing.List[typing.Any] = <factory>) Define the Assessments resource model schema. RiscStacks RiscStacks( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, session: Session = <requests.sessions.Session object at 0x7fa8f059ad00>, items: typing.List[typing.Any] = <factory>, return_status: str = '', return_status_detail: str = '', json: typing.Dict[str, str] = <factory>, page: int = 0, stacks: typing.List[typing.Any] = <factory>) Define the Stacks resource model schema. RiscStackConnectivity RiscStackConnectivity( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, avg_duration_per_connection: float = 0.0, avg_kbps_per_connection: float = 0.0, avg_rtt_per_connection: float = 0.0, connections_seen_via_netstat: int = 0, dest_location: int = 0, dest_location_name: str = '', max_kbps_per_connection: float = 0.0, max_rtt_per_connection: float = 0.0, min_rtt_per_connection: float = 0.0, number_of_distinct_protocols: int = 0, number_of_distinct_source_ip_dest_ip_pairs: int = 0, source_location_name: str = '', source_locationid: int = 0, total_bytes: int = 0, total_duration_per_connection: float = 0.0, total_flows: int = 0) Define the Connectivity resource model schema. avg_duration_per_connection avg_kbps_per_connection avg_rtt_per_connection connections_seen_via_netstat dest_location dest_location_name max_kbps_per_connection max_rtt_per_connection min_rtt_per_connection number_of_distinct_protocols number_of_distinct_source_ip_dest_ip_pairs source_location_name source_locationid total_bytes total_duration_per_connection total_flows RiscStackConnectivityParent RiscStackConnectivityParent( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, connectivity: typing.List[typing.Any] = <factory>, returnStatus: str = '', returnStatusDetail: str = '') Define the parent Stack Connectivity resource model schema. dataframe Handle converting the connectivity list of objects to a pandas DataFrame. returnStatus returnStatusDetail RiscDeviceConnectivity RiscDeviceConnectivity( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, avg_duration: float = 0.0, avg_kbps: float = 0.0, avg_rtt: float = 0.0, dest_application: str = '', dest_application_context: str = '', dest_application_instance: str = '', dest_bytes: int = 0, dest_deviceid: int = 0, dest_ip: str = '', dest_packet_count: int = 0, dest_packet_loss: int = 0, dest_port: int = 0, dest_process: str = '', max_kbps: float = 0.0, max_rtt: float = 0.0, min_rtt: float = 0.0, netstat_count: int = 0, source_application: str = '', source_application_context: str = '', source_application_instance: str = '', source_bytes: int = 0, source_deviceid: int = 0, source_packet_count: int = 0, source_packet_loss: int = 0, source_process: str = '', src_ip: str = '', total_bytes: int = 0, total_duration: float = 0.0, total_packets: int = 0) Define the Device Connectivity resource model schema. avg_duration avg_kbps avg_rtt dest_application dest_application_context dest_application_instance dest_bytes dest_deviceid dest_ip dest_packet_count dest_packet_loss dest_port dest_process max_kbps max_rtt min_rtt netstat_count source_application source_application_context source_application_instance source_bytes source_deviceid source_packet_count source_packet_loss source_process src_ip total_bytes total_duration total_packets RiscDeviceConnectivityParent RiscDeviceConnectivityParent( self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, connectivity: typing.List[typing.Any] = <factory>, returnStatus: str = '', returnStatusDetail: str = '') Define the parent Device Connectivity resource model schema. returnStatus returnStatusDetail RiscTag RiscTag(self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, tagid: int = 0, tagkey: str = '', tagvalue: str = '') Define the Tag resource model schema. tagid tagkey tagvalue RiscStack RiscStack(self, uuid: UUID = UUID('99575cad-8ee2-4941-b359-81b2a298eb17'), response: Response = <Response [None]>, confirmed: str = '', confirmedby: str = 'not set', licensed: int = 0, num_members_with_failed_checks: int = 0, num_stack_members: int = 0, stack_name: str = '', stackid: int = 0, tags: typing.List[typing.Any] = <factory>) Define the Stack resource model schema. confirmed confirmedby licensed num_members_with_failed_checks num_stack_members stack_name stackid","title":"Models"},{"location":"code/risc/utils/","text":"risc.utils Define the RISC utilities. get_user_agent get_user_agent(user_agent: str = 'risc-python') Get the current module version. roundup roundup(x: float) Round the provided float up to the nearest tens. determine_bytes determine_bytes(size: float) Determine the highest denomination from bytes to KB, MB, GB, and TB. Args: size (int): The size, in bytes. Returns: dict: The dictionary mapping of highest bytes denomination and the equivalent size. format_bytes format_bytes(size: float, denomination: str = 'GB') Convert bytes to the desired denomination. Args: size (int): The size, in bytes. denomination (str): The byte denomination to convert size to. Defaults to: GB. Options are: KB, MB, GB, and TB. Returns: float: The float formatted to the requested denomination. handle_disk_sizing handle_disk_sizing(total_size: str, free_size: str, fudge_factor: float = 1.5) Determine disk sizing based on the provided fudge factor and utilized space.","title":"Utilities"}]}