{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"risc-python Python client and CLI for RISC Requirements Python 3.6+ Installation & Usage pyenv install 3.7 pip(env) install risc","title":"Home"},{"location":"#risc-python","text":"Python client and CLI for RISC","title":"risc-python"},{"location":"#requirements","text":"Python 3.6+","title":"Requirements"},{"location":"#installation-usage","text":"pyenv install 3.7 pip(env) install risc","title":"Installation &amp; Usage"},{"location":"changes/","text":"Change Log v0.0.1 (2019-09-10) * This Change Log was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"changes/#change-log","text":"","title":"Change Log"},{"location":"changes/#v001-2019-09-10","text":"* This Change Log was automatically generated by github_changelog_generator","title":"v0.0.1 (2019-09-10)"},{"location":"references/","text":"Reference Materials Documentation RISC General Documentation RESTful API Access Swagger API Documentation API References Errors Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body. Package Related General Guidance Python 3 - Type hints MyPy - Python 3 Cheat Sheet Packages & Dependencies Package Dependencies Requests - Python HTTP module Python Fire - CLI module Build/Dev/Testing Dependencies black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"References"},{"location":"references/#reference-materials","text":"","title":"Reference Materials"},{"location":"references/#documentation","text":"","title":"Documentation"},{"location":"references/#risc","text":"General Documentation RESTful API Access Swagger API Documentation","title":"RISC"},{"location":"references/#api-references","text":"","title":"API References"},{"location":"references/#errors","text":"Some errors are not specifically written in every method since they may always return. Those are: 401 (Unauthorized) - Failed authentication. 500 (Internal Server Error) - Occurs anytime the RISC REST API receives malformed data or body.","title":"Errors"},{"location":"references/#package-related","text":"","title":"Package Related"},{"location":"references/#general-guidance","text":"Python 3 - Type hints MyPy - Python 3 Cheat Sheet","title":"General Guidance"},{"location":"references/#packages-dependencies","text":"","title":"Packages &amp; Dependencies"},{"location":"references/#package-dependencies","text":"Requests - Python HTTP module Python Fire - CLI module","title":"Package Dependencies"},{"location":"references/#builddevtesting-dependencies","text":"black - Python linter isort - Python import automatic sorting pydocstyle - Python docstring/pep-257 linting pycodestyle - Python code complexity / McCabe validation yapf - Python linter / automatic styling pylint - Python linter flake8 - Python linter bandit autopep8 - Python automatic styling/linting pytest - Python test module pytest-sugar - PyTest plugin pytest-isort - PyTest isort plugin coverage - Python Coverage module codecov - CodeCov.io coverage service pytest-cov - PyTest coverage plugin mock - Python test mocking module responses - Python request response testing module twine - Python package bundling mypy - Python type validation","title":"Build/Dev/Testing Dependencies"},{"location":"securitypolicy/","text":"Security Policy This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases. Supported Versions Version Supported 0.0.x :x: 0.x.x :x: Reporting a Vulnerability Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Security Policy"},{"location":"securitypolicy/#security-policy","text":"This project is currently in alpha and is not guaranteed. Please be warned... Your mileage may vary! All current versions of this client are pre-releases.","title":"Security Policy"},{"location":"securitypolicy/#supported-versions","text":"Version Supported 0.0.x :x: 0.x.x :x:","title":"Supported Versions"},{"location":"securitypolicy/#reporting-a-vulnerability","text":"Please report bugs by raising a new issue on this repository: https://github.com/2ndWatch/risc-python/issues/new","title":"Reporting a Vulnerability"},{"location":"code/risc/main/","text":"risc.main Define the RISC primary module. RISC RISC(self, api_token: str = '', user_id: str = '', password: str = '') -> None Define the RISC toplevel class. build_auth RISC.build_auth(self) -> Dict[str, str] Build the API authentication token. get_assessments RISC.get_assessments(self) -> risc.models.RiscAssessments Get the RISC assessment code. Returns: str: The RISC assessment code. get_assessment RISC.get_assessment(self, **kwargs) -> risc.models.RiscAssessment Get the RISC assessment code. Returns: str: The RISC assessment code. get_auth_token RISC.get_auth_token(self) Authenticate with RISC. Returns: str: The final authentication token to be used with subsequent requests. assets_get_summary RISC.assets_get_summary(self) Use to retrieve a list of device types and counts. assets_get_assets RISC.assets_get_assets(self, device_type: str = '', stack_id: int = 0, device_id: str = '', tag_id: str = '', page: int = 0) -> requests.models.Response Use to retrieve a list of device types and counts. stacks_get_summary RISC.stacks_get_summary(self) Use to retrieve a list of stacks. stacks_get_summary_cost RISC.stacks_get_summary_cost(self, provider_id: str) Use to retrieve a list of stack costs. stacks_get_connectivity RISC.stacks_get_connectivity(self, stack_id: str = '') -> risc.models.RiscStackConnectivityParent Use to retrieve a list of connected stacks. stacks_get_device_connectivity RISC.stacks_get_device_connectivity(self, stack_id: int, connectivity_type: str = 'internal', page: int = 0) -> risc.models.RiscDeviceConnectivityParent Use to retrieve a list of connected stacks. iaas_get_providers RISC.iaas_get_providers(self) Use to retrieve a list of IaaS providers. iaas_pricing RISC.iaas_pricing(self, payload: Dict[str, str]) Use to retrieve a list of IaaS pricing. tags_get_tags RISC.tags_get_tags(self, payload: Dict[str, str]) Use to retrieve a list of IaaS providers. tags_add_tags RISC.tags_add_tags(self, payload: Dict[str, str]) Use to retrieve a list of IaaS providers. assets_search RISC.assets_search(self, search: str = '') Get RISC assessment data. ucel_get_checks RISC.ucel_get_checks(self, device_id: str = '') Use to retrieve a list of checks that have been run against devices. ucel_get_assets RISC.ucel_get_assets(self, check_id: str = '') Use to retrieve data on the device(s) by check. ucel_get_assets_paginated RISC.ucel_get_assets_paginated(self, check_id: str = '', page: int = 1) Use to retrieve data on the device(s) by check. stacks_get_listeners RISC.stacks_get_listeners(self, stack_id: int) Use to retrieve a list of listeners in a stack. get_swagger RISC.get_swagger(self) Fetch the swagger API configuration file. get_server RISC.get_server(self, search: str = '', compare: str = 'hostname') -> Dict[str, Any] Sift through the asset search response and only return the relevant host. get_disks RISC.get_disks(self, search: str, fudge_factor: float = 1.5) Get disk data for a specific asset. main main() -> None Define the main entry method for the CLI.","title":"Main"},{"location":"code/risc/utils/","text":"risc.utils Define the RISC utilities. get_user_agent get_user_agent(user_agent: str = 'risc-python') Get the current module version. format_bytes format_bytes(size) -> Dict[str, Any] Format bytes to KB, MB, GB, and TB. handle_disk_sizing handle_disk_sizing(total_size: str, free_size: str, fudge_factor: float = 1.5) -> Dict[str, Any] Determine disk sizing based on the provided fudge factor and utilized space.","title":"Utilities"}]}